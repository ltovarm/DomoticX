version: "3.9"

services:
  # Create service with RabbitMQ.
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - 5672:5672 # for sender and consumer connections
      - 15672:15672 # for serve RabbitMQ GUI
    volumes:
      - ./BackEnd/internal/queue/dev-rabbitmq/data/:/var/lib/rabbitmq
      - ./BackEnd/internal/queue/dev-rabbitmq/log/:/var/log/rabbitmq
    restart: always
    networks:
      - dev-network
  # Create service with SQL.
  db-sql:
    container_name: db-sql
    ports:
      - 5432:5432
    build:
      context: .
      dockerfile: ./BackEnd/internal/database/Dockerfile-sql
    environment:
      POSTGRES_USER: postgres # ${DB_USER}
      POSTGRES_PASSWORD: mysecretpassword # ${DB_PASSWORD}
      POSTGRES_DB: house #${DB_NAME}
      DATABASE_URL: postgres://postgres:mysecretpassword@db-sql:5432/house?sslmode=disable
    restart: always
    networks:
      - dev-network
    dns_search:
      - dev-network
  # Create service login.
  login:
    container_name: login
    ports:
      - 8082:8082
    build:
      context: .
      dockerfile: ./BackEnd/internal/login/Dockerfile-login
    environment:
      DATABASE_URL: postgres://postgres:mysecretpassword@db-sql:5432/house?sslmode=disable
    dns:
      - 8.8.8.8
    restart: always
    networks:
      - dev-network
    depends_on:
      - db-sql
      - my-react-app
  # Create service with Fiber sender.
  sender:
    container_name: sender
    ports:
      - 8000:8000
    build:
      context: .
      dockerfile: ./BackEnd/internal/queue/sender/Dockerfile-sender
    environment:
      AMQP_SERVER_URL: amqp://guest:guest@message-broker:5672/
    restart: always
    networks:
      - dev-network
    depends_on:
      - message-broker
  # Create service with message consumer.
  consumer:
    container_name: consumer
    ports:
      - 8080:8080
    build:
      context: .
      dockerfile: ./BackEnd/internal/queue/consumer/Dockerfile-consumer
    environment:
      AMQP_SERVER_URL: amqp://guest:guest@message-broker:5672/
      DATABASE_URL: postgres://postgres:mysecretpassword@db-sql:5432/house?sslmode=disable
    dns:
      - 8.8.8.8
    restart: always
    networks:
      - dev-network
    links:
      - my-react-app
    depends_on:
      - sender
      - message-broker
      - db-sql
  # Create smoke test.
  tcpsmoke:
    container_name: tcpsmoke
    ports:
      - 8001:8001
    build:
      context: .
      dockerfile: ./BackEnd/internal/queue/sender/test/Dockerfile-tcp
    restart: "no"
    networks:
      - dev-network
    links:
      - sender
  
  # FRONT
  # Create react app
  my-react-app:
    build:
      context: .
      dockerfile: ./FrontEnd/Dockerfile-react
    ports:
      - "3000:3000"
    networks:
      - dev-network
    dns_search:
      - dev-network
  # Create nginx
  nginx:
    image: nginx:alpine
    volumes:
      - ./FrontEnd/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - dev-network
    dns_search:
      - dev-network
    depends_on:
      - my-react-app
networks:
  # Create a new Docker network.
  dev-network:
    driver: bridge
